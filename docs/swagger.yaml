definitions:
  db.AuditLogCmsDto:
    properties:
      action:
        $ref: '#/definitions/enum.DataAction'
      data:
        $ref: '#/definitions/db.M'
      domain_id:
        example: 654db9eca1f1b1bdbf3d4617
        type: string
      log_id:
        example: 812db9eca1f1b1bdbf3d4617
        type: string
      method:
        example: GET
        type: string
      name:
        example: Role
        type: string
      updated_at:
        example: "2006-01-02T03:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      url:
        example: /v1/cms/roles
        type: string
    type: object
  db.AuthChangePasswordData:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  db.AuthLoginData:
    properties:
      keycode:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - keycode
    - password
    - username
    type: object
  db.AuthRefreshTokenData:
    properties:
      keycode:
        type: string
      refresh_token:
        type: string
      username:
        type: string
    required:
    - keycode
    - refresh_token
    - username
    type: object
  db.AuthRegisterData:
    properties:
      keycode:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - keycode
    - password
    - username
    type: object
  db.AuthSessionDto:
    properties:
      access_token:
        type: string
      email:
        type: string
      is_root:
        type: boolean
      is_tenant:
        type: boolean
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        type: array
      phone:
        type: string
      tenant_id:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  db.AuthTokenDto:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  db.ClientCmsData:
    properties:
      name:
        example: Aloha
        type: string
    required:
    - name
    type: object
  db.ClientCmsDto:
    properties:
      client_id:
        example: ogy64Ji1E4VY0S8b99oGDlDCRk5ZO3
        type: string
      client_secret:
        example: oSAa14Q1Ne6iSqVLs4nfG7p12K6cyv67PyV3L509
        type: string
      name:
        example: Aloha
        type: string
      secure_key:
        example: QX9f276HW4fyL38Jto0pi9WVa40yLRpW0jsKN033
        type: string
      updated_at:
        example: "2006-01-02T03:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.M:
    additionalProperties: {}
    type: object
  db.PrivacySettings:
    properties:
      is_public:
        type: boolean
      show_date_of_birth:
        type: boolean
      show_email:
        type: boolean
      show_name:
        type: boolean
      show_phone:
        type: boolean
      show_profile_picture:
        type: boolean
    type: object
  db.UserProfileDto:
    properties:
      date_of_birth:
        type: string
        format: date-time
      email:
        example: aloha@email.com
        type: string
      email_verified:
        type: boolean
      email_verified_at:
        type: string
        format: date-time
      name:
        example: Aloha
        type: string
      phone:
        example: 0973123456
        type: string
      privacy_preferences:
        $ref: '#/definitions/db.PrivacySettings'
      profile_picture:
        type: string
      user_id:
        example: 671db9eca1f1b1bdbf3d4618
        type: string
      username:
        example: aloha
        type: string
    type: object
  db.UserProfileUpdateData:
    properties:
      date_of_birth:
        type: string
        format: date-time
      email:
        example: aloha@email.com
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: 0973123456
        type: string
      profile_picture:
        type: string
    required:
    - date_of_birth
    - email
    - name
    - phone
    type: object
  db.UserPrivacyUpdateData:
    properties:
      is_public:
        type: boolean
      show_date_of_birth:
        type: boolean
      show_email:
        type: boolean
      show_name:
        type: boolean
      show_phone:
        type: boolean
      show_profile_picture:
        type: boolean
    required:
    - is_public
    - show_date_of_birth
    - show_email
    - show_name
    - show_phone
    - show_profile_picture
    type: object
  db.RoleCmsData:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      name:
        example: Aloha
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        minItems: 1
        type: array
    required:
    - data_status
    - name
    - permissions
    type: object
  db.RoleCmsDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      name:
        example: Aloha
        type: string
      permissions:
        items:
          $ref: '#/definitions/enum.Permission'
        type: array
      role_id:
        example: 671db9eca1f1b1bdbf3d4617
        type: string
      updated_at:
        example: "2006-01-02T03:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
    type: object
  db.TenantCmsData:
    properties:
      address:
        example: Aloha City
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      keycode:
        example: aloha
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      username:
        example: aloha
        type: string
    required:
    - address
    - data_status
    - email
    - keycode
    - name
    - phone
    - username
    type: object
  db.TenantCmsDto:
    properties:
      address:
        example: Aloha City
        type: string
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      keycode:
        example: aloha
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      tenant_id:
        example: 671dfc49f06ba89b1811cc5a
        type: string
      updated_at:
        example: "2006-01-02T03:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      username:
        example: aloha
        type: string
    type: object
  db.UserCmsData:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      role_ids:
        example:
        - 671db9eca1f1b1bdbf3d4617
        items:
          type: string
        minItems: 1
        type: array
      username:
        example: aloha
        type: string
    required:
    - data_status
    - email
    - name
    - phone
    - role_ids
    - username
    type: object
  db.UserCmsDto:
    properties:
      data_status:
        $ref: '#/definitions/enum.DataStatus'
      email:
        example: aloha@email.com
        type: string
      name:
        example: Aloha
        type: string
      phone:
        example: "0973123456"
        type: string
      role_ids:
        example:
        - 671db9eca1f1b1bdbf3d4617
        items:
          type: string
        type: array
      updated_at:
        example: "2006-01-02T03:04:05Z"
        type: string
      updated_by:
        example: editor
        type: string
      user_id:
        example: 671db9eca1f1b1bdbf3d4618
        type: string
      username:
        example: aloha
        type: string
    type: object
  db.KYCDocumentUploadData:
    properties:
      document_type:
        type: string
        enum: [passport, drivers_license, national_id, proof_of_address]
        example: passport
      file_type:
        type: string
        enum: [front, back, document]
        example: front
    required:
    - document_type
    - file_type
    type: object
  db.KYCSubmissionData:
    properties:
      document_type:
        type: string
        enum: [passport, drivers_license, national_id]
        example: passport
      has_all_documents:
        type: boolean
        example: true
      confirm_accuracy:
        type: boolean
        example: true
    required:
    - document_type
    - has_all_documents
    - confirm_accuracy
    type: object
  db.KYCVerificationData:
    properties:
      action:
        type: string
        enum: [approve, reject]
        example: approve
      reason:
        type: string
        example: "Additional documentation required"
      notes:
        type: string
        example: "Please provide clearer image of passport"
    required:
    - action
    type: object
  db.KYCDocumentStatus:
    properties:
      has_front:
        type: boolean
        example: true
      has_back:
        type: boolean
        example: true
      has_document:
        type: boolean
        example: true
      uploaded_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      is_complete:
        type: boolean
        example: true
    type: object
  db.KYCVerificationStatusDto:
    properties:
      submitted_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      verified_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      verified_by:
        type: string
        example: "admin_user_id"
      rejected_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      rejected_by:
        type: string
        example: "admin_user_id"
      rejection_reason:
        type: string
        example: "Document quality insufficient"
      admin_notes:
        type: string
        example: "Please resubmit with higher quality images"
    type: object
  db.KYCVerificationHistoryDto:
    properties:
      action:
        type: string
        example: submitted
      action_by:
        type: string
        example: "user_id"
      action_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      reason:
        type: string
        example: "Initial submission"
      notes:
        type: string
        example: "All documents provided"
    type: object
  db.KYCStatusDto:
    properties:
      kyc_status:
        type: string
        enum: [not_started, pending_kyc, submitted, in_review, verified, rejected]
        example: submitted
      can_submit:
        type: boolean
        example: true
      has_documents:
        type: boolean
        example: true
      documents_status:
        type: object
        additionalProperties:
          $ref: '#/definitions/db.KYCDocumentStatus'
      verification:
        $ref: '#/definitions/db.KYCVerificationStatusDto'
      history:
        type: array
        items:
          $ref: '#/definitions/db.KYCVerificationHistoryDto'
    type: object
  db.KYCPendingMemberDto:
    properties:
      id:
        type: string
        example: "654db9eca1f1b1bdbf3d4617"
      email:
        type: string
        example: "member@example.com"
      first_name:
        type: string
        example: "John"
      last_name:
        type: string
        example: "Doe"
      kyc_status:
        type: string
        example: "submitted"
      submitted_at:
        type: string
        format: date-time
        example: "2006-01-02T03:04:05Z"
      document_type:
        type: string
        example: "passport"
      documents:
        type: object
        additionalProperties:
          $ref: '#/definitions/db.KYCDocumentStatus'
    type: object
  enum.DataAction:
    enum:
    - create
    - update
    - delete
    - reset_password
    type: string
    x-enum-varnames:
    - DataActionCreate
    - DataActionUpdate
    - DataActionDelete
    - DataActionResetPassword
  enum.DataStatus:
    enum:
    - enable
    - disable
    type: string
    x-enum-varnames:
    - DataStatusEnable
    - DataStatusDisable
  enum.Permission:
    enum:
    - system_setting
    - system_audit_log
    - client_view
    - client_create
    - client_delete
    - role_view
    - role_create
    - role_update
    - user_view
    - user_create
    - user_update
    - user_view_self
    - user_update_self
    - kyc_view
    - kyc_verify
    - tenant_view
    - tenant_create
    - tenant_update
    type: string
    x-enum-varnames:
    - PermissionSystemSetting
    - PermissionSystemAuditLog
    - PermissionClientView
    - PermissionClientCreate
    - PermissionClientDelete
    - PermissionRoleView
    - PermissionRoleCreate
    - PermissionRoleUpdate
    - PermissionUserView
    - PermissionUserCreate
    - PermissionUserUpdate
    - PermissionUserViewSelf
    - PermissionUserUpdateSelf
    - PermissionKYCView
    - PermissionKYCVerify
    - PermissionTenantView
    - PermissionTenantCreate
    - PermissionTenantUpdate
info:
  contact: {}
  title: Document APIs
paths:
  /auth/v1/change-password:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthChangePasswordData'
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
  /auth/v1/flush-cache:
    get:
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Flush Cache
      tags:
      - Auth
  /auth/v1/login:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthLoginData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthTokenDto'
      summary: Login
      tags:
      - Auth
  /auth/v1/logout:
    post:
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Auth
  /auth/v1/me:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthSessionDto'
      security:
      - BearerAuth: []
      summary: Get Me
      tags:
      - Auth
  /auth/v1/refresh-token:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthRefreshTokenData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.AuthTokenDto'
      summary: Refresh Token
      tags:
      - Auth
  /auth/v1/register:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.AuthRegisterData'
      responses:
        "200":
          description: OK
      summary: Register
      tags:
      - Auth
  /profile/v1:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserProfileDto'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Profile
    put:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserProfileUpdateData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserProfileDto'
      security:
      - BearerAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /profile/v1/privacy:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.PrivacySettings'
      security:
      - BearerAuth: []
      summary: Get Privacy Settings
      tags:
      - Profile
    put:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserPrivacyUpdateData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.PrivacySettings'
      security:
      - BearerAuth: []
      summary: Update Privacy Settings
      tags:
      - Profile
  /profile/v1/picture:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Profile picture image file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: Profile picture uploaded successfully
          schema:
            properties:
              message:
                type: string
              profile_picture:
                type: string
            type: object
        "400":
          description: Bad Request - Invalid file format or size
        "401":
          description: Unauthorized - Invalid or expired token
        "500":
          description: Internal Server Error - Upload failed
      security:
      - BearerAuth: []
      summary: Upload Profile Picture
      tags:
      - Profile
    delete:
      responses:
        "200":
          description: Profile picture deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "404":
          description: Not Found - User not found
      security:
      - BearerAuth: []
      summary: Delete Profile Picture
      tags:
      - Profile
  /profile/v1/public/{user_id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserProfileDto'
        "403":
          description: Forbidden - Profile is not public
        "404":
          description: Not Found - User not found
      summary: Get Public Profile
      tags:
      - Profile
  /profile/v1/account:
    delete:
      responses:
        "200":
          description: Account deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Root users cannot delete their accounts
        "404":
          description: Not Found - User not found
        "500":
          description: Internal Server Error - Deletion failed
      security:
      - BearerAuth: []
      summary: Delete User Account
      tags:
      - Profile
  /cms/v1/auditlogs:
    get:
      parameters:
      - in: query
        name: domain_id
        type: string
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - in: query
        name: name
        type: string
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.AuditLogCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Audit Logs
      tags:
      - Cms
  /cms/v1/clients:
    get:
      parameters:
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.ClientCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Clients
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.ClientCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ClientCmsDto'
      security:
      - BearerAuth: []
      summary: Create Client
      tags:
      - Cms
  /cms/v1/clients/{client_id}:
    delete:
      parameters:
      - description: client_id
        in: path
        name: client_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ClientCmsDto'
      security:
      - BearerAuth: []
      summary: Delete Client
      tags:
      - Cms
  /cms/v1/roles:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.RoleCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Roles
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.RoleCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.RoleCmsDto'
      security:
      - BearerAuth: []
      summary: Create Role
      tags:
      - Cms
  /cms/v1/roles/{role_id}:
    put:
      parameters:
      - description: role_id
        in: path
        name: role_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.RoleCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.RoleCmsDto'
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - Cms
  /cms/v1/tenants:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.TenantCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Tenants
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TenantCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
      security:
      - BearerAuth: []
      summary: Create Tenant
      tags:
      - Cms
  /cms/v1/tenants/{tenant_id}:
    put:
      parameters:
      - description: tenant_id
        in: path
        name: tenant_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.TenantCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
      security:
      - BearerAuth: []
      summary: Update Tenant
      tags:
      - Cms
  /cms/v1/tenants/{tenant_id}/reset-password:
    post:
      parameters:
      - description: tenant_id
        in: path
        name: tenant_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.TenantCmsDto'
      security:
      - BearerAuth: []
      summary: Reset Password For Tenant
      tags:
      - Cms
  /cms/v1/users:
    get:
      parameters:
      - enum:
        - enable
        - disable
        in: query
        name: data_status
        type: string
        x-enum-varnames:
        - DataStatusEnable
        - DataStatusDisable
      - default: 10
        in: query
        maximum: 100
        minimum: 1
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - in: query
        name: role_id
        type: string
      - in: query
        name: search
        type: string
      - default: created_at.desc
        in: query
        name: sorts
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.UserCmsDto'
            type: array
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - Cms
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
      security:
      - BearerAuth: []
      summary: Create User
      tags:
      - Cms
  /cms/v1/users/{user_id}:
    put:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.UserCmsData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Cms
  /cms/v1/users/{user_id}/reset-password:
    post:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.UserCmsDto'
      security:
      - BearerAuth: []
      summary: Reset Password For User
      tags:
      - Cms
  /rest/v1/metas:
    get:
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      security:
      - BearerAuth: []
      summary: Get Metas
      tags:
      - Rest
  /storage/v1/images:
    post:
      parameters:
      - description: files
        in: formData
        name: files
        required: true
        type: file
      responses: {}
      security:
      - BearerAuth: []
      summary: Upload Image
      tags:
      - Storage
  /storage/v1/images/{filename}:
    get:
      parameters:
      - description: filename
        in: path
        name: filename
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      summary: Download Image
      tags:
      - Storage
  /storage/v1/videos:
    post:
      parameters:
      - description: files
        in: formData
        name: files
        required: true
        type: file
      responses: {}
      security:
      - BearerAuth: []
      summary: Upload Video
      tags:
      - Storage
  /storage/v1/videos/{filename}:
    get:
      parameters:
      - description: filename
        in: path
        name: filename
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      summary: Download Video
      tags:
      - Storage
  /webhook/v1:
    post:
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.M'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.M'
      security:
      - BasicAuth: []
      summary: Webhook
      tags:
      - Webhook
  /websocket/v1:
    get:
      responses:
        "101":
          description: Switching Protocols
      security:
      - BearerAuth: []
      summary: Websocket
      tags:
      - Websocket
  /kyc/v1/documents/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: KYC document file (PDF, JPG, PNG, TIFF)
        in: formData
        name: file
        required: true
        type: file
      - description: Type of document
        in: formData
        name: document_type
        required: true
        type: string
        enum: [passport, drivers_license, national_id, proof_of_address]
      - description: Side of document
        in: formData
        name: file_type
        required: true
        type: string
        enum: [front, back, document]
      responses:
        "200":
          description: Document uploaded successfully
          schema:
            properties:
              message:
                type: string
                example: "Document uploaded successfully"
              object_path:
                type: string
                example: "member_id/passport/front/timestamp-filename.jpg"
            type: object
        "400":
          description: Bad Request - Invalid file or data
        "401":
          description: Unauthorized - Invalid or expired token
        "500":
          description: Internal Server Error - Upload failed
      security:
      - BearerAuth: []
      summary: Upload KYC Document
      tags:
      - KYC
  /kyc/v1/status:
    get:
      responses:
        "200":
          description: Current KYC status
          schema:
            $ref: '#/definitions/db.KYCStatusDto'
        "401":
          description: Unauthorized - Invalid or expired token
        "404":
          description: Member not found
      security:
      - BearerAuth: []
      summary: Get KYC Status
      tags:
      - KYC
  /kyc/v1/submit:
    post:
      parameters:
      - description: KYC submission data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.KYCSubmissionData'
      responses:
        "200":
          description: KYC submitted successfully
          schema:
            properties:
              message:
                type: string
                example: "KYC submitted for verification successfully"
              status:
                type: string
                example: "submitted"
            type: object
        "400":
          description: Bad Request - Invalid submission data
        "401":
          description: Unauthorized - Invalid or expired token
        "409":
          description: Conflict - KYC already submitted or verified
      security:
      - BearerAuth: []
      summary: Submit KYC for Verification
      tags:
      - KYC
  /kyc/v1/documents/{document_type}:
    delete:
      parameters:
      - description: Type of document to delete
        in: path
        name: document_type
        required: true
        type: string
        enum: [passport, drivers_license, national_id, proof_of_address]
      responses:
        "200":
          description: Document deleted successfully
          schema:
            properties:
              message:
                type: string
                example: "Documents for passport deleted successfully"
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Cannot delete documents in current status
        "404":
          description: Member not found
      security:
      - BearerAuth: []
      summary: Delete KYC Document
      tags:
      - KYC
  /kyc/v1/admin/pending:
    get:
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          description: List of pending KYC verifications
          schema:
            properties:
              members:
                type: array
                items:
                  $ref: '#/definitions/db.KYCPendingMemberDto'
              total_count:
                type: integer
                example: 25
              page:
                type: integer
                example: 1
              limit:
                type: integer
                example: 10
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Insufficient permissions
      security:
      - BearerAuth: []
      summary: Get Pending KYC Verifications (Admin)
      tags:
      - KYC Admin
  /kyc/v1/admin/members/{member_id}:
    get:
      parameters:
      - description: Member ID
        in: path
        name: member_id
        required: true
        type: string
      responses:
        "200":
          description: Detailed member KYC information
          schema:
            properties:
              id:
                type: string
                example: "654db9eca1f1b1bdbf3d4617"
              email:
                type: string
                example: "member@example.com"
              first_name:
                type: string
                example: "John"
              last_name:
                type: string
                example: "Doe"
              phone:
                type: string
                example: "+1234567890"
              date_of_birth:
                type: string
                format: date-time
              kyc_status:
                $ref: '#/definitions/db.KYCStatusDto'
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Insufficient permissions or different tenant
        "404":
          description: Member not found
      security:
      - BearerAuth: []
      summary: Get Member KYC Details (Admin)
      tags:
      - KYC Admin
  /kyc/v1/admin/verify/{member_id}:
    post:
      parameters:
      - description: Member ID
        in: path
        name: member_id
        required: true
        type: string
      - description: Verification decision
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/db.KYCVerificationData'
      responses:
        "200":
          description: Member KYC verification completed
          schema:
            properties:
              message:
                type: string
                example: "Member KYC approved successfully"
              status:
                type: string
                example: "verified"
            type: object
        "400":
          description: Bad Request - Invalid verification data
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Insufficient permissions or different tenant
        "404":
          description: Member not found
        "409":
          description: Conflict - Member not ready for verification
      security:
      - BearerAuth: []
      summary: Verify Member KYC (Admin)
      tags:
      - KYC Admin
  /kyc/v1/admin/documents/{member_id}/{filename}:
    get:
      parameters:
      - description: Member ID
        in: path
        name: member_id
        required: true
        type: string
      - description: Document filename
        in: path
        name: filename
        required: true
        type: string
      responses:
        "200":
          description: Document download URL
          schema:
            properties:
              download_url:
                type: string
                example: "https://storage.example.com/presigned-url"
              expires_in:
                type: integer
                example: 3600
            type: object
        "401":
          description: Unauthorized - Invalid or expired token
        "403":
          description: Forbidden - Insufficient permissions or different tenant
        "404":
          description: Member or document not found
      security:
      - BearerAuth: []
      summary: Download KYC Document (Admin)
      tags:
      - KYC Admin
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    in: Header
    name: Authorization
    type: apiKey
swagger: "2.0"
